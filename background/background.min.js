async function setInitializationStatus(a){return new Promise(e=>{chrome.storage.local.set({isInitialized:a},e)})}async function isInitialized(){return new Promise(a=>{chrome.storage.local.get("isInitialized",e=>{a(e.isInitialized||!1)})})}async function getSemaphoreStatus(){return new Promise(a=>{chrome.storage.local.get("isScraping",e=>{a(e.isScraping)})})}async function setSemaphoreStatus(a){return new Promise(e=>{chrome.storage.local.set({isScraping:a},e)})}async function waitForSemaphore(){for(;await getSemaphoreStatus();)await new Promise(a=>setTimeout(a,50)),console.log("Waiting for semaphore...");await setSemaphoreStatus(!1)}async function getSemaphore(){await setSemaphoreStatus(!0)}async function releaseSemaphore(){await setSemaphoreStatus(!1)}async function readJCRExcel(){try{await waitForSemaphore();let a=chrome.runtime.getURL("data/2024-JCR_IMPACT_FACTOR.xlsx"),e=await fetch(a),t=await e.arrayBuffer(),r=XLSX.read(t,{type:"array"}),i=r.SheetNames[0],o=r.Sheets[i],n=XLSX.utils.sheet_to_json(o);await chrome.storage.local.set({jcrJSON:n}),await getJCRExcel(),await releaseSemaphore()}catch(s){console.error("Error reading .xlsx file:",s),chrome.runtime.sendMessage({type:"release_semaphore"},a=>{console.log(a.status)})}}async function getJCRExcel(){return new Promise(a=>{chrome.storage.local.get("jcrJSON",e=>{a(e.jcrJSON||!1)})})}async function getRetractionWatchDB(){return new Promise(a=>{chrome.storage.local.get("retractionwatchdb",e=>{a(e.retractionwatchdb||!1)})})}async function downloadRetractionWatchDB(){try{await waitForSemaphore();let a=await fetch("https://gitlab.com/crossref/retraction-watch-data/-/raw/main/retraction_watch.csv"),e=await a.blob();Papa.parse(e,{header:!0,skipEmptyLines:!0,complete(a){chrome.storage.local.set({retractionwatchdb:a.data}),getRetractionWatchDB(),releaseSemaphore(),setInitializationStatus(!0)}})}catch(t){console.error("Error downloading RetractionWatchDB data :",t),chrome.runtime.sendMessage({type:"release_semaphore"},a=>{console.log(a.status)})}}releaseSemaphore(),chrome.runtime.onMessage.addListener((a,e,t)=>("get_semaphore"===a.type?(async()=>{await waitForSemaphore(),await getSemaphore(),t({status:"Semaphore acquired"})})():"release_semaphore"===a.type?(async()=>{await releaseSemaphore(),t({status:"Semaphore released"})})():"wait_for_initialization"===a.type&&(async()=>{for(;!await isInitialized();)await new Promise(a=>setTimeout(a,50)),console.log("Waiting for initialization...");t({status:"Initialized GScholarLENS!"})})(),!0)),onbeforeunload=a=>{releaseSemaphore()};let loadScript;"function"==typeof importScripts?loadScript=function(a,e){try{importScripts(a),e&&e()}catch(t){console.error("Failed to load script:",t,a)}}:"undefined"!=typeof document&&document.head?loadScript=function(a,e){var t=document.head,r=document.createElement("script");r.type="text/javascript",r.src=a,r.onreadystatechange=e,r.onload=e,t.appendChild(r)}:console.error("No valid environment for loading scripts.");const xlsxPath=chrome.runtime.getURL("libs/xlsx.full.min.js");loadScript(xlsxPath,readJCRExcel);const papaparsePath=chrome.runtime.getURL("libs/papaparse.min.js");loadScript(papaparsePath,downloadRetractionWatchDB),chrome.action.onClicked.addListener(a=>{let e=a.url||"";console.log("Clicked on tab URL:",e),e.includes("user=")&&e.includes("scholar.google")&&chrome.scripting.executeScript({target:{tabId:a.id},files:["content/GScholarLENS.js"]}).catch(a=>{console.error("Injection failed:",a)})}),chrome.action.onClicked.addListener(()=>{chrome.tabs.create({url:"https://project.iith.ac.in/sharmaglab/gscholarlens/"})});