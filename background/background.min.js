const semaphore_queue=[];let processing_tab=null;async function setPermissionStatus(e){return new Promise(t=>{chrome.storage.local.set({isPermitted:e},t)})}async function isPermitted(){return new Promise(e=>{chrome.storage.local.get("isPermitted",t=>{e(t.isPermitted||!1)})})}async function openPopupWindow(e){let t={url:e,type:"popup",width:400,height:600,left:100,top:100,focused:!0};return"undefined"!=typeof browser&&browser.windows?await browser.windows.create(t):"undefined"!=typeof chrome&&chrome.windows?chrome.windows.create(t):console.error("No windows API available"),!0}async function permissionsCheck(){try{let e=chrome.runtime.getManifest(),t=e.host_permissions||[],a=e.optional_permissions||[],i={};t.length&&(i.origins=t),a.length&&(i.permissions=a);let n=await chrome.permissions.contains(i);if(n)setPermissionStatus(!0);else{let r=chrome.runtime.getURL("content/permissions.html");await openPopupWindow(r)}}catch(s){console.error("Error requesting permissions:",s),setPermissionStatus(!1)}}async function setInitializationStatus(e){return new Promise(t=>{chrome.storage.local.set({isInitialized:e},t)})}async function isInitialized(){return new Promise(e=>{chrome.storage.local.get("isInitialized",t=>{e(t.isInitialized||!1)})})}async function getSemaphoreStatus(){return new Promise(e=>{chrome.storage.local.get("isScraping",t=>{e(t.isScraping)})})}async function setSemaphoreStatus(e){return new Promise(t=>{chrome.storage.local.set({isScraping:e},t)})}async function waitForSemaphore(){for(;await getSemaphoreStatus();)await new Promise(e=>setTimeout(e,50)),console.log("Waiting for semaphore...");await setSemaphoreStatus(!1)}async function getSemaphore(){await setSemaphoreStatus(!0)}async function releaseSemaphore(){await setSemaphoreStatus(!1)}async function deviceCheck(){try{let e=!1,t="undefined"!=typeof browser&&browser.runtime&&browser.runtime.getPlatformInfo?browser.runtime.getPlatformInfo:"undefined"!=typeof chrome&&chrome.runtime&&chrome.runtime.getPlatformInfo?()=>new Promise(e=>chrome.runtime.getPlatformInfo(e)):null;if(!t){e=!1,console.warn("getPlatformInfo API not available. Defaulting to isDesktop = false.");return}let a=await t();return e="android"!==a.os,console.log(a),console.log(`Running on ${a.os}. isDesktop: ${e}`),new Promise(t=>{chrome.storage.local.set({isDesktop:e},t)})}catch(i){console.error("Error determining platform:",i)}}async function isDesktop(){return new Promise(e=>{chrome.storage.local.get("isDesktop",t=>{e(t.isDesktop||!1)})})}async function readJCRExcel(){try{await waitForSemaphore();let e=chrome.runtime.getURL("data/2024-JCR_IMPACT_FACTOR.xlsx"),t=await fetch(e),a=await t.arrayBuffer(),i=XLSX.read(a,{type:"array"}),n=i.SheetNames[0],r=i.Sheets[n],s=XLSX.utils.sheet_to_json(r);await chrome.storage.local.set({jcrJSON:s}),await getJCRExcel(),await releaseSemaphore()}catch(o){console.error("Error reading .xlsx file:",o),chrome.runtime.sendMessage({type:"release_semaphore"},e=>{console.log(e.status)})}}async function getJCRExcel(){return new Promise(e=>{chrome.storage.local.get("jcrJSON",t=>{e(t.jcrJSON||!1)})})}async function getRetractionWatchDB(){return new Promise(e=>{chrome.storage.local.get("retractionwatchdb",t=>{e(t.retractionwatchdb||!1)})})}async function downloadRetractionWatchDB(){try{await waitForSemaphore();let e=await fetch("https://gitlab.com/crossref/retraction-watch-data/-/raw/main/retraction_watch.csv"),t=e.body.getReader(),a=[],i=!1;for(;!i;){let{value:n,done:r}=await t.read();n&&a.push(n),i=r}let s=new Blob(a);Papa.parse(s,{header:!0,skipEmptyLines:!0,complete(e){chrome.storage.local.set({retractionwatchdb:e.data}),getRetractionWatchDB(),releaseSemaphore(),setInitializationStatus(!0)}})}catch(o){console.error("Error downloading RetractionWatchDB data :",o),releaseSemaphore()}}!async function(){await permissionsCheck(),await releaseSemaphore(),deviceCheck(),await isPermitted()&&await initializeGScholarLENS()}(),chrome.runtime.onInstalled.addListener(async e=>{chrome.runtime.setUninstallURL("https://forms.gle/uHuKHqutNQF1ToPW7")}),chrome.runtime.onMessage.addListener((e,t,a)=>("get_semaphore"===e.type?(async()=>{for(;await getSemaphoreStatus();)await new Promise(e=>setTimeout(e,1e3*Math.random()));await waitForSemaphore(),await getSemaphore(),processing_tab=t.tab.id,a({status:"Semaphore acquired"})})():"release_semaphore"===e.type?(async()=>{processing_tab&&processing_tab===t.tab.id&&(await releaseSemaphore(),processing_tab=null,a({status:"Semaphore released"}))})():"wait_for_initialization"===e.type?(async()=>{for(;!await isInitialized();)await new Promise(e=>setTimeout(e,50)),console.log("Waiting for initialization...");a({status:"Initialized GScholarLENS!"})})():"device_check"===e.type?(async()=>{for(;!await isInitialized();)await new Promise(e=>setTimeout(e,50));a({isDesktop:await isDesktop()})})():"permissions_check"===e.type?(async()=>{await isPermitted()&&!await isInitialized()&&await initializeGScholarLENS(),a({isPermitted:await isPermitted()})})():"permissions_granted"===e.type?(async()=>{await setPermissionStatus(!0),await isInitialized()||await initializeGScholarLENS(),a({isPermitted:await isPermitted()})})():"initialization_check"===e.type&&(async()=>{a({isInitialized:await isInitialized()})})(),!0)),onbeforeunload=e=>{releaseSemaphore()};let loadScript;function loadLib(e,t){return new Promise((a,i)=>{loadScript(e,()=>{t(),a()})})}async function initializeGScholarLENS(){if("function"==typeof importScripts)readJCRExcel(),downloadRetractionWatchDB();else{let e=chrome.runtime.getURL("libs/xlsx.full.min.js");loadScript(e,readJCRExcel);let t=chrome.runtime.getURL("libs/papaparse.min.js");loadScript(t,downloadRetractionWatchDB)}}"function"==typeof importScripts?loadScript=function(e,t){try{importScripts(e),t&&t()}catch(a){console.error("(Chrome) Failed to load script:",a.name,a.message,a.code,e)}}:"undefined"!=typeof document&&document.head?loadScript=function(e,t){var a=document.head,i=document.createElement("script");i.type="text/javascript",i.src=e,i.onreadystatechange=t,i.onload=t,a.appendChild(i)}:console.error("No valid environment for loading scripts."),chrome.action.onClicked.addListener(e=>{let t=e.url||"";t.includes("user=")&&t.includes("scholar.google")&&chrome.scripting.executeScript({target:{tabId:e.id},files:["content/GScholarLENS.js"]}).catch(e=>{console.error("Injection failed:",e)})}),"function"==typeof importScripts&&importScripts(chrome.runtime.getURL("libs/xlsx.full.min.js"),chrome.runtime.getURL("libs/papaparse.min.js")),chrome.action.onClicked.addListener(async()=>{await isPermitted()||await permissionsCheck(),chrome.tabs.create({url:"https://project.iith.ac.in/sharmaglab/gscholarlens/"})});