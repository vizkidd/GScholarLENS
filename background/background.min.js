async function setInitializationStatus(e){return new Promise(t=>{chrome.storage.local.set({isInitialized:e},t)})}async function isInitialized(){return new Promise(e=>{chrome.storage.local.get("isInitialized",t=>{e(t.isInitialized||!1)})})}async function getSemaphoreStatus(){return new Promise(e=>{chrome.storage.local.get("isScraping",t=>{e(t.isScraping)})})}async function setSemaphoreStatus(e){return new Promise(t=>{chrome.storage.local.set({isScraping:e},t)})}async function waitForSemaphore(){for(;await getSemaphoreStatus();)await new Promise(e=>setTimeout(e,50)),console.log("Waiting for semaphore...");await setSemaphoreStatus(!1)}async function getSemaphore(){await setSemaphoreStatus(!0)}async function releaseSemaphore(){await setSemaphoreStatus(!1)}async function deviceCheck(){try{let e=!1,t="undefined"!=typeof browser&&browser.runtime&&browser.runtime.getPlatformInfo?browser.runtime.getPlatformInfo:"undefined"!=typeof chrome&&chrome.runtime&&chrome.runtime.getPlatformInfo?()=>new Promise(e=>chrome.runtime.getPlatformInfo(e)):null;if(!t){e=!1,console.warn("getPlatformInfo API not available. Defaulting to isDesktop = false.");return}let a=await t();return e="android"!==a.os,console.log(a),console.log(`Running on ${a.os}. isDesktop: ${e}`),new Promise(t=>{chrome.storage.local.set({isDesktop:e},t)})}catch(r){console.error("Error determining platform:",r)}}async function isDesktop(){return new Promise(e=>{chrome.storage.local.get("isDesktop",t=>{e(t.isDesktop||!1)})})}async function readJCRExcel(){try{await waitForSemaphore();let e=chrome.runtime.getURL("data/2024-JCR_IMPACT_FACTOR.xlsx"),t=await fetch(e),a=await t.arrayBuffer(),r=XLSX.read(a,{type:"array"}),i=r.SheetNames[0],n=r.Sheets[i],o=XLSX.utils.sheet_to_json(n);await chrome.storage.local.set({jcrJSON:o}),await getJCRExcel(),await releaseSemaphore()}catch(s){console.error("Error reading .xlsx file:",s),chrome.runtime.sendMessage({type:"release_semaphore"},e=>{console.log(e.status)})}}async function getJCRExcel(){return new Promise(e=>{chrome.storage.local.get("jcrJSON",t=>{e(t.jcrJSON||!1)})})}async function getRetractionWatchDB(){return new Promise(e=>{chrome.storage.local.get("retractionwatchdb",t=>{e(t.retractionwatchdb||!1)})})}async function downloadRetractionWatchDB(){try{await waitForSemaphore();let e=await fetch("https://gitlab.com/crossref/retraction-watch-data/-/raw/main/retraction_watch.csv"),t=await e.blob();Papa.parse(t,{header:!0,skipEmptyLines:!0,complete(e){chrome.storage.local.set({retractionwatchdb:e.data}),getRetractionWatchDB(),releaseSemaphore(),setInitializationStatus(!0)}})}catch(a){console.error("Error downloading RetractionWatchDB data :",a),chrome.runtime.sendMessage({type:"release_semaphore"},e=>{console.log(e.status)})}}releaseSemaphore(),deviceCheck(),chrome.runtime.onMessage.addListener((e,t,a)=>("get_semaphore"===e.type?(async()=>{await waitForSemaphore(),await getSemaphore(),a({status:"Semaphore acquired"})})():"release_semaphore"===e.type?(async()=>{await releaseSemaphore(),a({status:"Semaphore released"})})():"wait_for_initialization"===e.type?(async()=>{for(;!await isInitialized();)await new Promise(e=>setTimeout(e,50)),console.log("Waiting for initialization...");a({status:"Initialized GScholarLENS!"})})():"device_check"===e.type&&(async()=>{for(;!await isInitialized();)await new Promise(e=>setTimeout(e,50));a({isDesktop:await isDesktop()})})(),!0)),onbeforeunload=e=>{releaseSemaphore()};let loadScript;"function"==typeof importScripts?loadScript=function(e,t){try{importScripts(e),t&&t()}catch(a){console.error("Failed to load script:",a,e)}}:"undefined"!=typeof document&&document.head?loadScript=function(e,t){var a=document.head,r=document.createElement("script");r.type="text/javascript",r.src=e,r.onreadystatechange=t,r.onload=t,a.appendChild(r)}:console.error("No valid environment for loading scripts.");const xlsxPath=chrome.runtime.getURL("libs/xlsx.full.min.js");loadScript(xlsxPath,readJCRExcel);const papaparsePath=chrome.runtime.getURL("libs/papaparse.min.js");loadScript(papaparsePath,downloadRetractionWatchDB),chrome.action.onClicked.addListener(e=>{let t=e.url||"";console.log("Clicked on tab URL:",t),t.includes("user=")&&t.includes("scholar.google")&&chrome.scripting.executeScript({target:{tabId:e.id},files:["content/GScholarLENS.js"]}).catch(e=>{console.error("Injection failed:",e)})}),chrome.action.onClicked.addListener(()=>{chrome.tabs.create({url:"https://project.iith.ac.in/sharmaglab/gscholarlens/"})});